type Comment {
  contents: NonEmptyString
  creationTime: DateTime
  id: ID!
  imageUrls: [URL!]
  isLiked: Boolean!
  isModified: Boolean!
  likedCount: NonNegativeInt!
  modificationTime: DateTime

  """
  이 댓글의 상위 댓글
  """
  parentComment: Comment

  """
  이 댓글이 달린 피드
  """
  post: Post

  """
  대댓글
  """
  subcomments: [Comment!]

  """
  댓글을 작성한 사용자
  """
  user: User
}

scalar Date

scalar DateTime

scalar EmailAddress

enum Gender {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

type Group {
  creationTime: DateTime!
  description: NonEmptyString
  id: ID!
  imageUrl: URL
  isJoined: Boolean!
  leader: User
  memberCount: NonNegativeInt!
  modificationTime: DateTime!
  name: NonEmptyString!
  newMembers: [User!]
  newPostCount: NonNegativeInt!
}

input GroupCreationInput {
  description: NonEmptyString
  imageUrl: URL
  name: NonEmptyString!
}

input GroupModificationInput {
  description: NonEmptyString
  id: ID!
  imageUrl: URL
  name: NonEmptyString
}

scalar JWT

scalar LastValue

scalar Latitude

scalar Longitude

type Mutation {
  createComment(commentId: ID, contents: NonEmptyString!, postId: ID!): Comment
  createGroup(input: GroupCreationInput!): Group
  createPoll(input: PollCreationInput!): Poll
  createPost(input: PostCreationInput!): Post
  createZoom(input: ZoomCreationInput!): Zoom
  deleteComment(id: ID!): Comment
  deleteGroup(id: ID!): Group
  deletePost(id: ID!): Post
  deleteZoom(id: ID!): Zoom
  joinGroup(id: ID): Group
  joinZoom(id: ID!): Zoom

  """
  로그아웃 성공 여부 반환
  """
  logout: Boolean!
  readNotifications(ids: [ID!]!): NonNegativeInt
  toggleLikingComment(id: ID!): Comment

  """
  회원탈퇴 시 사용자 정보가 모두 초기화됩니다
  """
  unregister: User
  updateComment(contents: NonEmptyString!, id: ID!): Comment
  updateGroup(input: GroupModificationInput!): Group
  updatePost(input: PostModificationInput!): Post

  """
  사용자 정보를 수정합니다
  """
  updateUser(input: UserModificationInput!): User
  updateZoom(input: ZoomModificationInput!): Zoom
}

scalar NonEmptyString

scalar NonNegativeInt

type Notification {
  contents: NonEmptyString!
  creationTime: DateTime!
  id: ID!
  isRead: Boolean!
  receiver: User!
  sender: User
  type: NotificationType!
}

enum NotificationType {
  LIKING_COMMENT
  NEW_COMMENT
  NEW_SUBCOMMENT
}

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: LastValue
  limit: PositiveInt!
}

type Poll {
  closingTime: DateTime!
  contents: NonEmptyString
  creationTime: DateTime!
  id: ID!
  selection: [PollSelection!]
  status: Status!
  title: NonEmptyString!
}

type PollComment {
  contents: NonEmptyString
  creationTime: DateTime!
  id: ID!
  modificationTime: DateTime!
  selection: [PollSelection!]
  status: Status!
  title: NonEmptyString!
}

input PollCreationInput {
  title: NonEmptyString!
}

type PollSelection {
  contents: NonEmptyString!
  count: NonNegativeInt!
  creationTime: DateTime!
  id: ID!
  poll: Poll!
}

scalar PositiveInt

type Post {
  commentCount: NonNegativeInt!
  contents: NonEmptyString!
  creationTime: DateTime!

  """
  모임
  """
  group: Group
  id: ID!
  imageUrls: [URL!]

  """
  피드 좋아요 여부 (로그인 필요)
  """
  isLiked: Boolean!
  modificationTime: DateTime!
  title: NonEmptyString!

  """
  글쓴이
  """
  user: User
}

input PostCreationInput {
  contents: NonEmptyString!
  groupId: ID
  imageUrls: [URL!]
  title: NonEmptyString!
}

input PostModificationInput {
  contents: NonEmptyString
  id: ID!
  imageUrls: [URL!]
  title: NonEmptyString
}

type Query {
  """
  특정 게시글에 달린 댓글
  """
  commentsByPost(postId: ID!): [Comment!]

  """
  이번 달 핫한 이야기
  """
  famousPosts: [Post!]
  group(id: ID!): Group

  """
  사용자 닉네임 중복 여부 검사
  """
  isNicknameUnique(nickname: NonEmptyString!): Boolean!

  """
  좋아요 누른 댓글
  """
  likedComments: [Comment!]

  """
  현재 로그인된(JWT) 사용자 정보를 반환
  """
  me: User

  """
  내가 쓴 댓글
  """
  myComments: [Comment!]
  myGroups: [Group!]
  myPosts: [Post!]
  myZooms: [Zoom!]
  notifications: [Notification!]
  participatingPolls: [Poll!]

  """
  글 상세
  """
  post(id: ID!): Post

  """
  글 목록
  """
  posts(pagination: Pagination!): [Post!]
  postsByGroup(groupId: ID!): [Post!]
  recommendationGroups: [Group!]

  """
  글 검색
  """
  searchPosts(keywords: [NonEmptyString!]!): [Post!]

  """
  글 검색
  """
  searchZooms(keywords: [NonEmptyString!]!): [Zoom!]

  """
  닉네임으로 사용자 검색
  """
  userByNickname(nickname: NonEmptyString!): User

  """
  글 상세
  """
  zoom(id: ID!): Zoom

  """
  글 목록
  """
  zooms(pagination: Pagination!): [Zoom!]
}

type Review {
  contents: NonEmptyString
  creationTime: DateTime!
  id: ID!
  modificationTime: DateTime!
  title: NonEmptyString
  writer: User
}

enum Status {
  CLOSED
  ONGOING
  PLANNED
}

scalar URL

scalar UUID

type User {
  bio: NonEmptyString
  birthday: NonEmptyString!
  birthyear: Int!
  creationTime: DateTime!
  email: EmailAddress!
  gender: Gender!
  hasNewNotifications: Boolean!
  id: UUID!
  imageUrl: URL
  likedCount: NonNegativeInt!
  modificationTime: DateTime!
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
}

input UserModificationInput {
  ageRange: NonEmptyString
  bio: String
  birthday: NonEmptyString
  email: EmailAddress
  gender: Gender
  imageUrl: URL
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
}

type Zoom {
  creationTime: DateTime!
  description: NonEmptyString!
  id: ID!
  imageUrl: URL
  isJoined: Boolean!
  modificationTime: DateTime!
  tag: [NonEmptyString!]
  tags: [NonEmptyString!]
  title: NonEmptyString!
  whenWhat: [NonEmptyString!]!
  whenWhere: NonEmptyString!
}

input ZoomCreationInput {
  description: NonEmptyString!
  imageUrl: URL
  title: NonEmptyString!
}

input ZoomModificationInput {
  contents: NonEmptyString
  id: ID!
  imageUrl: URL
  title: NonEmptyString
}
